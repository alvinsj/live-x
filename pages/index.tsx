import { useCallback, useEffect, useReducer } from 'react'
import dynamic from 'next/dynamic'

import type { NextPage } from 'next'
import Head from 'next/head'

import styles from '../styles/Home.module.css'
import useLiveFeed from '../hooks/useLiveFeed'
import reducer, { initialState } from '../entities/Order/reducer'
import { OrderData, ProductType } from '../services/types'
import mapMessageToOrderAction from '../entities/Order/mapMessageToOrderAction'
import { OrderWithTotal } from '../entities/Order/types'

const numberFormat = new Intl.NumberFormat('en-US')
const priceFormat = new Intl.NumberFormat('en-US', {
  minimumFractionDigits: 2,
})
const percentageFormat = new Intl.NumberFormat('en-US', {
  minimumFractionDigits: 2,
  maximumFractionDigits: 2,
})
const spreadFormat = new Intl.NumberFormat('en-US', {
  minimumFractionDigits: 1,
})
const n = (num: number, isPrice = false) =>
  isPrice ? priceFormat.format(num) : numberFormat.format(num)

const Home: NextPage = () => {
  const [state, dispatch] = useReducer(reducer, initialState)

  const handleLiveFeed = useCallback((data: OrderData) => {
    const msg = mapMessageToOrderAction(data)
    if (typeof msg !== 'undefined') dispatch(msg)
  }, [])

  const { close, subscribe, productType } = useLiveFeed(handleLiveFeed)

  useEffect(() => {
    subscribe(ProductType.PI_XBTUSD)
    return () => {
      close()
    }
  }, [])

  const handleToggle = useCallback(() => {
    const anotherType =
      productType === ProductType.PI_XBTUSD
        ? ProductType.PI_ETHUSD
        : ProductType.PI_XBTUSD
    subscribe(anotherType)
  }, [productType, subscribe])

  const spreadAmount =
      state.bids.length > 0 && state.asks.length > 0
        ? Math.abs(state.bids[0][0] - state.asks[0][0])
        : 0,
    spreadPercentage =
      state.asks.length > 0 ? spreadAmount / state.asks[0][0] : 0,
    spreadText = `Spread: ${spreadFormat.format(
      spreadAmount
    )} (${percentageFormat.format(spreadPercentage)}%)`

  const limitedRows = (
    items: OrderWithTotal[],
    mapper: {
      ([price, size, total]: OrderWithTotal): JSX.Element
    }
  ) =>
    new Array(Math.min(20, items.length)).fill(false).map((_, i) => {
      return typeof items[i] !== 'undefined' ? mapper(items[i]) : false
    })

  return (
    <div className={styles.container}>
      <Head>
        <title>{productType}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header className={styles.header}>
        <h1 className={styles.header_h1}>Order Book</h1>
        <p className={styles.header_spread}>{spreadText}</p>
      </header>

      <main className={styles.main}>
        <section className={styles.orders}>
          <p className={styles.spread}>{spreadText}</p>
          <table className={styles.bids}>
            <thead>
              <tr>
                <th>Price</th>
                <th>Size</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              {limitedRows(state.bids, ([price, size, total]) => (
                <tr key={price} className={styles.order}>
                  <td className={styles.order_price}>{n(price, true)}</td>
                  <td className={styles.order_size}>{n(size)}</td>
                  <td className={styles.order_total}>{n(total)}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <table className={styles.asks}>
            <thead>
              <tr>
                <th>Price</th>
                <th>Size</th>
                <th>Total</th>
              </tr>
            </thead>
            <tbody>
              {limitedRows(state.asks, ([price, size, total]) => (
                <tr key={price} className={styles.order}>
                  <td className={styles.order_price}>{n(price, true)}</td>
                  <td className={styles.order_size}>{n(size)}</td>
                  <td className={styles.order_total}>{n(total)}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </section>
      </main>

      <footer className={styles.footer}>
        <button className={styles.footer_button} onClick={handleToggle}>
          Toggle
        </button>
      </footer>
    </div>
  )
}

export default dynamic(() => Promise.resolve(Home), { ssr: false })
